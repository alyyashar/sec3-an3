"use client";

import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { AlertTriangle, ChevronDown, Code, ExternalLink, Info } from "lucide-react";

interface VulnerabilityAnalysisProps {
  detailed?: boolean;
  project: any;
}

export function VulnerabilityAnalysis({ detailed = false, project }: VulnerabilityAnalysisProps) {
  const [openItems, setOpenItems] = useState<Record<string, boolean>>({});

  const toggleItem = (id: string) => {
    setOpenItems((prev) => ({
      ...prev,
      [id]: !prev[id],
    }));
  };

  // Get vulnerabilities from scanner results
  const scannerVulns = project?.scan_results?.scanner_results?.vulnerabilities || [];

  // Check for missed vulnerabilities in two possible locations:
  const aiMissed =
    project?.scan_results?.ai_verification?.missed_vulnerabilities ||
    project?.scan_results?.ai_verification?.verification?.missed_vulnerabilities ||
    [];

  const combinedIssues = [...scannerVulns, ...aiMissed].map((vuln: any, idx) => ({
    id: `VUL-${idx + 1}`,
    title: vuln.issue || vuln.title || "Unnamed Vulnerability",
    severity: vuln.severity || "Medium",
    description: vuln.description || vuln.reason || "No description provided.",
    // Construct location from file and line if available
    location: vuln.location && vuln.location.file 
      ? `${vuln.location.file}${vuln.location.line ? ":" + vuln.location.line : ""}` 
      : "N/A",
    aiExplanation: vuln.ai_explanation || vuln.reason || "No AI explanation.",
    hasFix: !!vuln.fix_suggestion,
  }));

  return (
    <div className="space-y-4">
      {combinedIssues.map((vulnerability) => (
        <Collapsible
          key={vulnerability.id}
          open={openItems[vulnerability.id]}
          onOpenChange={() => toggleItem(vulnerability.id)}
          className="border rounded-lg overflow-hidden"
        >
          <div
            className={`p-4 ${
              vulnerability.severity === "Critical"
                ? "bg-red-500/10"
                : vulnerability.severity === "High"
                ? "bg-orange-500/10"
                : vulnerability.severity === "Medium"
                ? "bg-yellow-500/10"
                : "bg-blue-500/10"
            }`}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <AlertTriangle
                  className={`h-5 w-5 ${
                    vulnerability.severity === "Critical"
                      ? "text-red-500"
                      : vulnerability.severity === "High"
                      ? "text-orange-500"
                      : vulnerability.severity === "Medium"
                      ? "text-yellow-500"
                      : "text-blue-500"
                  }`}
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">{vulnerability.title}</span>
                    <Badge
                      variant={vulnerability.severity === "Critical" ? "destructive" : "outline"}
                      className={
                        vulnerability.severity === "High"
                          ? "border-orange-500 text-orange-500"
                          : vulnerability.severity === "Medium"
                          ? "border-yellow-500 text-yellow-500"
                          : vulnerability.severity === "Low"
                          ? "border-blue-500 text-blue-500"
                          : ""
                      }
                    >
                      {vulnerability.severity}
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground">{vulnerability.location}</p>
                </div>
              </div>
              <CollapsibleTrigger asChild>
                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                  <ChevronDown className="h-4 w-4" />
                  <span className="sr-only">Toggle</span>
                </Button>
              </CollapsibleTrigger>
            </div>
          </div>
          <CollapsibleContent>
            <div className="p-4 space-y-4">
              <div>
                <h4 className="text-sm font-medium mb-1">Description</h4>
                {vulnerability.description ? (
                  <ul className="list-disc list-inside space-y-1">
                    {vulnerability.description.split("\n").map((line: string, idx: number) => (
                      <li key={idx} className="text-sm">{line.trim()}</li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-sm">N/A</p>
                )}
              </div>

              <div className="bg-secondary/50 p-3 rounded-md">
                <div className="flex items-start space-x-2">
                  <Info className="h-4 w-4 text-primary mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium mb-1">AI Explanation</h4>
                    <p className="text-sm">{vulnerability.aiExplanation || "N/A"}</p>
                  </div>
                </div>
              </div>

              {detailed && (
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardContent className="p-4">
                      <h4 className="text-sm font-medium mb-2">Impact Analysis</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Exploitability:</span>
                          <span
                            className={
                              vulnerability.severity === "Critical" || vulnerability.severity === "High"
                                ? "text-red-500"
                                : "text-yellow-500"
                            }
                          >
                            {vulnerability.severity === "Critical"
                              ? "High"
                              : vulnerability.severity === "High"
                              ? "Medium"
                              : "Low"}
                          </span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Affected Components:</span>
                          <span>N/A</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Similar Issues:</span>
                          <span>N/A</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-sm font-medium">Auto-Fix Available</h4>
                        {vulnerability.hasFix ? (
                          <Badge variant="outline" className="border-green-500 text-green-500">
                            Yes
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="border-yellow-500 text-yellow-500">
                            Manual Fix
                          </Badge>
                        )}
                      </div>
                      <Button size="sm" className="w-full" disabled={!vulnerability.hasFix}>
                        <Code className="mr-2 h-4 w-4" />
                        {vulnerability.hasFix ? "Apply Auto-Fix" : "View Fix Guidelines"}
                      </Button>
                    </CardContent>
                  </Card>
                </div>
              )}

              <div className="flex justify-end">
                <Button variant="outline" size="sm">
                  View in Code <ExternalLink className="ml-2 h-3 w-3" />
                </Button>
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      ))}
    </div>
  );
}
