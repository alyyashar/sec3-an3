"use client"

import { useState } from "react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible"
import { AlertTriangle, ChevronDown, Code, ExternalLink, Info } from "lucide-react"

interface Vulnerability {
  id: string
  title: string
  severity: "Critical" | "High" | "Medium" | "Low"
  description: string
  location: string
  aiExplanation: string
  hasFix: boolean
}

const vulnerabilities: Vulnerability[] = [
  {
    id: "VUL-001",
    title: "Reentrancy Vulnerability",
    severity: "Critical",
    description: "External calls are made before state changes, allowing potential reentrancy attacks.",
    location: "TokenSwap.sol:142-156",
    aiExplanation:
      "The contract calls an external function before updating the state variable that tracks balances. An attacker could reenter the function and withdraw funds multiple times before the balance is updated.",
    hasFix: true,
  },
  {
    id: "VUL-002",
    title: "Unchecked Return Value",
    severity: "Critical",
    description: "The contract does not check the return value of a low-level call.",
    location: "TokenSwap.sol:203-205",
    aiExplanation:
      "Low-level calls like .call() don't revert on failure. The contract needs to explicitly check the return value to ensure the operation succeeded.",
    hasFix: true,
  },
  {
    id: "VUL-003",
    title: "Integer Overflow",
    severity: "High",
    description: "Potential integer overflow in fee calculation.",
    location: "TokenSwap.sol:87-89",
    aiExplanation:
      "When calculating fees, the contract multiplies values without checking for potential overflow. This could lead to incorrect fee calculations for large token amounts.",
    hasFix: true,
  },
  {
    id: "VUL-004",
    title: "Centralization Risk",
    severity: "High",
    description: "Owner has excessive privileges that could compromise the protocol.",
    location: "TokenSwap.sol:32-45",
    aiExplanation:
      "The contract owner can change critical parameters without timelock or governance. This creates a centralization risk if the owner's keys are compromised.",
    hasFix: true,
  },
  {
    id: "VUL-005",
    title: "Missing Input Validation",
    severity: "High",
    description: "Function accepts zero address as input parameter.",
    location: "TokenSwap.sol:112-118",
    aiExplanation:
      "The setTokenAddress function doesn't validate that the new address is not the zero address, which could lead to tokens being locked permanently.",
    hasFix: true,
  },
  {
    id: "VUL-006",
    title: "Front-Running Vulnerability",
    severity: "Medium",
    description: "Swap function is vulnerable to front-running attacks.",
    location: "TokenSwap.sol:167-189",
    aiExplanation:
      "The swap function doesn't implement any protection against front-running. Malicious actors could observe pending transactions and execute their own transactions with higher gas prices.",
    hasFix: false,
  },
  {
    id: "VUL-007",
    title: "Timestamp Dependence",
    severity: "Medium",
    description: "Contract relies on block.timestamp for critical logic.",
    location: "TokenSwap.sol:221-235",
    aiExplanation:
      "The contract uses block.timestamp for time-sensitive operations. Miners can manipulate this value slightly, which could affect the contract's behavior.",
    hasFix: true,
  },
]

interface VulnerabilityAnalysisProps {
  detailed?: boolean
}

export function VulnerabilityAnalysis({ detailed = false }: VulnerabilityAnalysisProps) {
  const [openItems, setOpenItems] = useState<Record<string, boolean>>({})

  const toggleItem = (id: string) => {
    setOpenItems((prev) => ({
      ...prev,
      [id]: !prev[id],
    }))
  }

  return (
    <div className="space-y-4">
      {vulnerabilities.map((vulnerability) => (
        <Collapsible
          key={vulnerability.id}
          open={openItems[vulnerability.id]}
          onOpenChange={() => toggleItem(vulnerability.id)}
          className="border rounded-lg overflow-hidden"
        >
          <div
            className={`p-4 ${
              vulnerability.severity === "Critical"
                ? "bg-red-500/10"
                : vulnerability.severity === "High"
                  ? "bg-orange-500/10"
                  : vulnerability.severity === "Medium"
                    ? "bg-yellow-500/10"
                    : "bg-blue-500/10"
            }`}
          >
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-3">
                <AlertTriangle
                  className={`h-5 w-5 ${
                    vulnerability.severity === "Critical"
                      ? "text-red-500"
                      : vulnerability.severity === "High"
                        ? "text-orange-500"
                        : vulnerability.severity === "Medium"
                          ? "text-yellow-500"
                          : "text-blue-500"
                  }`}
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">{vulnerability.title}</span>
                    <Badge
                      variant={
                        vulnerability.severity === "Critical"
                          ? "destructive"
                          : vulnerability.severity === "High"
                            ? "outline"
                            : vulnerability.severity === "Medium"
                              ? "outline"
                              : "outline"
                      }
                      className={
                        vulnerability.severity === "High"
                          ? "border-orange-500 text-orange-500"
                          : vulnerability.severity === "Medium"
                            ? "border-yellow-500 text-yellow-500"
                            : vulnerability.severity === "Low"
                              ? "border-blue-500 text-blue-500"
                              : ""
                      }
                    >
                      {vulnerability.severity}
                    </Badge>
                  </div>
                  <p className="text-sm text-muted-foreground">{vulnerability.location}</p>
                </div>
              </div>
              <CollapsibleTrigger asChild>
                <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                  <ChevronDown className="h-4 w-4" />
                  <span className="sr-only">Toggle</span>
                </Button>
              </CollapsibleTrigger>
            </div>
          </div>
          <CollapsibleContent>
            <div className="p-4 space-y-4">
              <div>
                <h4 className="text-sm font-medium mb-1">Description</h4>
                <p className="text-sm">{vulnerability.description}</p>
              </div>

              <div className="bg-secondary/50 p-3 rounded-md">
                <div className="flex items-start space-x-2">
                  <Info className="h-4 w-4 text-primary mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium mb-1">AI Explanation</h4>
                    <p className="text-sm">{vulnerability.aiExplanation}</p>
                  </div>
                </div>
              </div>

              {detailed && (
                <div className="grid grid-cols-2 gap-4">
                  <Card>
                    <CardContent className="p-4">
                      <h4 className="text-sm font-medium mb-2">Impact Analysis</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Exploitability:</span>
                          <span
                            className={
                              vulnerability.severity === "Critical" || vulnerability.severity === "High"
                                ? "text-red-500"
                                : "text-yellow-500"
                            }
                          >
                            {vulnerability.severity === "Critical"
                              ? "High"
                              : vulnerability.severity === "High"
                                ? "Medium"
                                : "Low"}
                          </span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Affected Components:</span>
                          <span>Core Protocol</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-muted-foreground">Similar Issues:</span>
                          <span>2 in other contracts</span>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardContent className="p-4">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="text-sm font-medium">Auto-Fix Available</h4>
                        {vulnerability.hasFix ? (
                          <Badge variant="outline" className="border-green-500 text-green-500">
                            Yes
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="border-yellow-500 text-yellow-500">
                            Manual Fix
                          </Badge>
                        )}
                      </div>
                      <Button size="sm" className="w-full" disabled={!vulnerability.hasFix}>
                        <Code className="mr-2 h-4 w-4" />
                        {vulnerability.hasFix ? "Apply Auto-Fix" : "View Fix Guidelines"}
                      </Button>
                    </CardContent>
                  </Card>
                </div>
              )}

              <div className="flex justify-end">
                <Button variant="outline" size="sm">
                  View in Code <ExternalLink className="ml-2 h-3 w-3" />
                </Button>
              </div>
            </div>
          </CollapsibleContent>
        </Collapsible>
      ))}
    </div>
  )
}

