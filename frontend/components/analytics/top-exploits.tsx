"use client";
import React, { useEffect, useState } from "react";
import { Flame, RefreshCw, ExternalLink } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

interface Exploit {
  id: string;
  name: string;
  amount: number;
  date: string;
  classification: string;
  source: string;
}

export default function TopDeFiExploits() {
  const [topExploits, setTopExploits] = useState<Exploit[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchExploits = async () => {
    try {
      setLoading(true);
      const response = await fetch("https://api.llama.fi/hacks");

      if (!response.ok) {
        throw new Error("Failed to fetch exploit data");
      }

      const data = await response.json();

      // Sorting by exploit amount in descending order
      const sortedData = data
        .sort((a: any, b: any) => b.amount - a.amount) // Sort by the amount of exploit value
        .slice(0, 5); // Get top 5 exploits

      const transformedExploits: Exploit[] = sortedData.map((exploit: any) => ({
        id: exploit.id || `exploit-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,
        name: exploit.name || "Unknown Protocol",
        amount: exploit.amount || 0,
        classification: exploit.classification || "Unknown",
        source: exploit.source || ""
      }));

      setTopExploits(transformedExploits);
      setLoading(false);
    } catch (err) {
      console.error("Error fetching exploits:", err);
      setError(err instanceof Error ? err.message : "Unknown error occurred");
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExploits();
    const intervalId = setInterval(fetchExploits, 5 * 60 * 1000); // Fetch every 5 minutes

    return () => clearInterval(intervalId);
  }, []);

  const handleRefresh = () => {
    setLoading(true);
    setTimeout(() => fetchExploits(), 500); // Refresh after a short delay
  };

  return (
    <Card className="bg-[#242424] border-none rounded-xl overflow-hidden">
      <CardHeader className="pb-2">
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-xl flex items-center gap-2 text-white">
              <Flame className="h-5 w-5 text-orange-400" />
              Top 5 DeFi Exploits
            </CardTitle>
            <CardDescription className="text-sm text-zinc-400 mt-1">
              Track the most impactful DeFi exploits and their respective losses. Stay informed about high-profile attacks and their consequences on DeFi platforms.
            </CardDescription>
          </div>
          <Badge variant="outline" className="bg-gray-400 text-[10px] w-24">
            All-Time
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm mt-10">
              <h4 className="font-medium text-white">Recent Exploits</h4>
              <button className="text-xs text-zinc-400 flex items-center gap-1" onClick={handleRefresh}>
                <RefreshCw className="h-3 w-3" /> Refresh
              </button>
            </div>
            <div className="space-y-2">
              {loading && <p className="text-zinc-400">Loading exploits...</p>}
              {error && <p className="text-red-500">Error: {error}</p>}
              {!loading && !error && topExploits.length === 0 && <p className="text-zinc-400">No recent exploits found.</p>}
              {!loading &&
                topExploits.map((exploit) => (
                  <div key={exploit.id} className="bg-gray-700/30 p-2 rounded-md flex items-center justify-between">
                    <div>
                      <div className="font-medium text-sm text-white">{exploit.name}</div>
                      <div className="text-xs text-gray-400 flex items-center gap-2">
                        <Badge variant="outline" className="bg-red-900/30 text-red-400 border-red-800 text-[10px]">
                          {exploit.classification}
                        </Badge>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="text-xs text-zinc-400">${exploit.amount.toLocaleString()}</div>
                    </div>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
